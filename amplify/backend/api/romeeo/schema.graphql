# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

# table definition for location
type Location @model @auth(
    rules : [
        # allow all authenticated users the ability to create posts
        # allow owners ability to update and delete their posts
        {
            allow : owner  
        },

        # allow all authenticated users to read posts
        {
            allow : private, operations: [create, update, read, delete]
        },

        # allow all guest users (not authenticated) to read posts
        {
            allow : public, operations: [read]
        },
    ]
)
{
  id: ID!
  name: String!
  district: String!
  pincode: Int
  Tags:String
  description: String!
  userId: String
  image: [String]
  rating: Int
  hotel: [Hotel] @hasMany
  state: State @belongsTo
  review: [Review] @hasMany
  like: [Like] @hasMany
  approval: String
  reviewCount: Int
}

type Hotel @model @auth(
    rules : [
        # allow all authenticated users the ability to create posts
        # allow owners ability to update and delete their posts
        {
            allow : owner  
        },

        # allow all authenticated users to read posts
        {
            allow : private, operations: [create, update, read, delete]
        },

        # allow all guest users (not authenticated) to read posts
        {
            allow : public, operations: [read]
        },
    ]
)
{
  id: ID!
  name: String!
  district: String!
  pincode: Int
  tags: [String]
  price: Int
  desciption: String
  max:Int
  userId: String
  image: [String] 
  location: Location @belongsTo
  rating: Int
  review: [HotelReview] @hasMany
  like: [HotelLike] @hasMany
  bookings: [HotelBooking] @hasMany
  approval: String
  reviewCount: Int
}

type State @model @auth(
    rules : [
        # allow all authenticated users the ability to create posts
        # allow owners ability to update and delete their posts
        {
            allow : owner  
        },

        # allow all authenticated users to read posts
        {
            allow : private, operations: [create, update, read, delete]
        },

        # allow all guest users (not authenticated) to read posts
        {
            allow : public, operations: [read]
        },
    ]
)
{
    id: ID!
    name: String!
    location: [Location] @hasMany
}

# type Post @model {
#   id: ID!
#   title: String!
#   blog: Blog @belongsTo
#   comments: [Comment] @hasMany
# }

type Review @model @auth(
    rules : [
        # allow all authenticated users the ability to create posts
        # allow owners ability to update and delete their posts
        {
            allow : owner  
        },

        # allow all authenticated users to read posts
        {
            allow : private, operations: [create, update, read, delete]
        },

        # allow all guest users (not authenticated) to read posts
        {
            allow : public, operations: [read]
        },
    ]
) {
  id: ID!
  location: Location @belongsTo
  title: String
  content: String!
  userId: String
  image: String
}

type Like @model @auth(
    rules : [
        # allow all authenticated users the ability to create posts
        # allow owners ability to update and delete their posts
        {
            allow : owner  
        },

        # allow all authenticated users to read posts
        {
            allow : private, operations: [create, update, read, delete]
        },

        # allow all guest users (not authenticated) to read posts
        {
            allow : public, operations: [read]
        },
    ]
) {
    id: ID!
    userId: String
    status: Boolean
    location: Location @belongsTo
}

type HotelReview @model @auth(
    rules : [
        # allow all authenticated users the ability to create posts
        # allow owners ability to update and delete their posts
        {
            allow : owner  
        },

        # allow all authenticated users to read posts
        {
            allow : private, operations: [create, update, read, delete]
        },

        # allow all guest users (not authenticated) to read posts
        {
            allow : public, operations: [read]
        },
    ]
) {
  id: ID!
  hotel: Hotel @belongsTo
  title: String
  content: String!
  userId: String
  image: String
}

type HotelLike @model @auth(
    rules : [
        # allow all authenticated users the ability to create posts
        # allow owners ability to update and delete their posts
        {
            allow : owner  
        },

        # allow all authenticated users to read posts
        {
            allow : private, operations: [create, update, read, delete]
        },

        # allow all guest users (not authenticated) to read posts
        {
            allow : public, operations: [read]
        },
    ]
) {
    id: ID!
    userId: String
    status: Boolean
    hotel: Hotel @belongsTo
}

type HotelBooking @model @auth(
    rules : [
        # allow all authenticated users the ability to create posts
        # allow owners ability to update and delete their posts
        {
            allow : owner  
        },

        # allow all authenticated users to read posts
        {
            allow : private, operations: [create, update, read, delete]
        },

        # allow all guest users (not authenticated) to read posts
        {
            allow : public, operations: [read]
        },
    ]
) {
    id: ID!
    userId: String
    name: String
    phone_number: Long
    email: String
    rooms: Int
    ac: Boolean
    checkIn: String
    checkOut: String
    price: Int
    tax: Int
    convinenece: Int
    total: Int
    payment: String
    status: String
    hotel: Hotel @belongsTo
}